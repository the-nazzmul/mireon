generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}

model User {
    id                 String              @id @default(cuid())
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    imageUrl           String?
    firstName          String?
    lastName           String?
    emailAddress       String              @unique
    credits            Int                 @default(500)
    userToProject      UserToProject[]
    questionsAsked     Question[]
    stripeTransactions StripeTransaction[]
}

model Project {
    id                  String                @id @default(cuid())
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    name                String
    githubUrl           String
    ownerId             String
    deletedAt           DateTime?
    userToProject       UserToProject[]
    commits             Commit[]
    sourceCodeEmbedding SourceCodeEmbedding[]
    savedQuestions      Question[]
    meetings            Meeting[]
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    projectId String
    user      User     @relation(fields: [userId], references: [id])
    project   Project  @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model SourceCodeEmbedding {
    id String @id @default(cuid())

    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String
    projectId        String
    project          Project                     @relation(fields: [projectId], references: [id])
}

model Meeting {
    id         String        @id @default(cuid())
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    name       String
    meetingUrl String
    projectId  String
    project    Project       @relation(fields: [projectId], references: [id])
    status     MeetingStatus @default(PROCESSING)
    issues     Issue[]
}

model Issue {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    start     String
    end       String
    gist      String
    headline  String
    summary   String
    meetingId String
    meeting   Meeting  @relation(fields: [meetingId], references: [id])
}

model Question {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    question        String
    answer          String
    filesReferences Json?
    projectId       String
    project         Project  @relation(fields: [projectId], references: [id])
    userId          String
    user            User     @relation(fields: [userId], references: [id])
}

model Commit {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    commitMessage      String
    commitHash         String
    comitAuthorName    String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String
    projectId          String
    project            Project  @relation(fields: [projectId], references: [id])
}

model StripeTransaction {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    credits   Int
}
